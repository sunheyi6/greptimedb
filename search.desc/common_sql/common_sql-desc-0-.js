searchState.loadedDescShard("common_sql", 0, "<code>ALIAS &lt;expr&gt;</code>\n<code>ALL</code> operation e.g. <code>foo &gt; ALL(bar)</code>, comparison operator is …\nAnd, e.g. <code>a AND b</code>\n<code>&amp;&gt;</code> Overlaps to right? (PostgreSQL/Redshift geometric …\n<code>&amp;&lt;</code> Overlaps to left? (PostgreSQL/Redshift geometric …\n<code>&amp;&lt;|</code> Does not extend above? (PostgreSQL/Redshift geometric …\n<code>ANY</code> operation e.g. <code>foo &gt; ANY(bar)</code>, comparison operator is …\nAny data type, used in BigQuery UDF definitions for …\nArrays\nAn array expression e.g. <code>ARRAY[1, 2]</code>\nThe <code>-&gt;</code> operator.\nThe <code>&lt;@</code> operator.\n<code>@</code> Contained or on? (PostgreSQL/Redshift geometric operator)\nThe <code>@&gt;</code> operator.\nThe <code>@@</code> operator.\n<code>@-@</code> Length or circumference (PostgreSQL/Redshift geometric …\nThe <code>@?</code> operator.\nAT a timestamp to a different timezone e.g. …\nUnary logical not operator: e.g. <code>! false</code> (Hive-specific)\n<code>&lt;expr&gt; [ NOT ] BETWEEN &lt;low&gt; AND &lt;high&gt;</code>\nThis is alias for <code>BigNumeric</code> type used in BigQuery\nBig integer with optional display width e.g. BIGINT or …\nUnsigned big integer with optional display width e.g. …\nBigNumeric type used in BigQuery\nFixed-length binary type with optional length e.g.  …\nBinary operation e.g. <code>1 + 1</code> or <code>foo &gt; bar</code>\nBinary operators\nBit string, e.g. Postgres, MySQL, or MSSQL\n<code>BIT VARYING(n)</code>: Variable-length bit string e.g. Postgres\nBitwise and, e.g. <code>a &amp; b</code>\nBitwise or, e.g. <code>a | b</code>\nBitwise XOR, e.g. <code>a ^ b</code>\nLarge binary object with optional length e.g. BLOB, …\nBool as alias for Boolean in postgresql\nBoolean\nBoolean value true or false\nType returned when the recursion returns early.\nType returned when the recursion returns early.\nBytea\nVariable-length binary data with optional length.\n…\n<code>CAST</code> an expression to a different data type e.g. …\nFixed-length char type e.g. CHAR(10)\nLarge character object with optional length e.g. CHAR …\nChar varying type e.g. CHAR VARYING(10)\nFixed-length character type e.g. CHARACTER(10)\nLarge character object with optional length e.g. CHARACTER …\nCharacter varying type e.g. CHARACTER VARYING(10)\n<code>[ CONSTRAINT &lt;name&gt; ] CHECK (&lt;expr&gt;)</code>\n<code>CHECK (&lt;expr&gt;)</code>\nLarge character object with optional length e.g. CLOB, …\nClustered represents the clustered version of table …\n<code>expr COLLATE collation</code>\nSQL column definition\n<code>ColumnOption</code>s are modifiers that follow a column …\nAn optionally-named <code>ColumnOption</code>: …\nMulti-part expression access.\nMulti-part identifier, e.g. <code>table_alias.column</code> or …\nCONVERT a value to a different data type or character …\nThe <code>CUBE</code> expr.\nCustom type such as enums\nSupport for custom operators (such as Postgres custom …\nSQL data types\nDate\nDate32 with the same range as Datetime64\nDatetime with optional time precision e.g. MySQL.\nDatetime with time precision and optional timezone e.g. …\nDec type with optional precision and scale e.g. DEC(10,2), …\nDecimal type with optional precision and scale e.g. …\n<code>DEFAULT &lt;restricted-expr&gt;</code>\nDialect-specific options, such as:\n<code>DuckDB</code> specific <code>Struct</code> literal expression 1\nDivide, e.g. <code>a / b</code>\nDouble\n<code>@@</code> Center (PostgreSQL/Redshift geometric operator) see …\n<code>##</code> Point of closest proximity (PostgreSQL/Redshift …\nDouble PRECISION e.g. standard, postgresql\nB“string value“\nDouble quoted literal with raw string prefix. Example …\nInteger division operator <code>//</code> in DuckDB\nEnums\n<code>EPHEMERAL [&lt;expr&gt;]</code>\nEqual, e.g. <code>a = b</code>\ne’string value’ (postgres extension) See Postgres docs …\nAn exists expression <code>[ NOT ] EXISTS(SELECT ...)</code>, used in …\nAn SQL expression of any type.\n<code>name</code> is arbitrary expression\nExtract a field from a timestamp e.g. …\nA fixed-length string e.g ClickHouse.\nFloating point with optional precision e.g. FLOAT(8)\nFloating point in clickhouse\nFloat4 as alias for Real in postgresql\nFloating point in bigquery\nFloat8 as alias for Double in postgresql\nA referential integrity constraint (…\nA referential integrity constraint (…\nMySQLs fulltext definition. Since the <code>SPATIAL</code> definition …\nA function call\nScalar function call e.g. <code>LEFT(foo, 5)</code>\nThe arguments passed to a function call.\n<code>Generated</code>s are modifiers that follow a column definition …\ngeometric type\nThe <code>GROUPING SETS</code> expr.\nGreater than, e.g. <code>a &gt; b</code>\n<code>&gt;^</code> Is above? (PostgreSQL/Redshift geometric operator) See …\nGreater equal, e.g. <code>a &gt;= b</code>\n<code>#</code> Number of points in path or polygon (PostgreSQL/Redshift …\nThe <code>#&gt;</code> operator.\nThe <code>#&gt;&gt;</code> operator.\nThe <code>#-</code> operator.\nX’hex value’\n<code>ILIKE</code> (case-insensitive <code>LIKE</code>)\nAn identifier, decomposed into its value or character data …\nSingle identifier options, e.g. <code>HEAP</code> for MSSQL.\nIdentifier e.g. table name or column name\nCreates an identity or an autoincrement column in a table. …\n<code>[ NOT ] IN (val1, val2, ...)</code>\n<code>[ NOT ] IN (SELECT ...)</code>\n<code>[ NOT ] IN UNNEST(array_expression)</code>\nMySQLs index definition for index creation. Not present on …\nInt with optional display width e.g. INT or INT(11)\nInteger type in clickhouse Note: Int128 mean 128 bits in …\nInteger type in clickhouse Note: Int16 mean 16 bits in …\nInt2 as alias for SmallInt in postgresql Note: Int2 mean 2 …\nInteger type in clickhouse Note: Int256 mean 256 bits in …\nUnsigned Int2 with optional display width e.g. INT2 …\nInteger type in clickhouse Note: Int16 mean 32 bits in …\nInt4 as alias for Integer in postgresql Note: Int4 mean 4 …\nUnsigned int4 with optional display width e.g. INT4 …\nInteger type in bigquery, clickhouse\nInt8 as alias for Bigint in postgresql and integer type in …\nUnsigned Int8 with optional display width e.g. INT8 …\nUnsigned int with optional display width e.g. INT UNSIGNED …\nInteger with optional display width e.g. INTEGER or …\nUnsigned integer with optional display width e.g. INTEGER …\nInterval\nAn interval expression e.g. <code>INTERVAL &#39;1&#39; YEAR</code>\n…\n<code>IS DISTINCT FROM</code> operator\n<code>IS FALSE</code> operator\n<code>&lt;expr&gt; IS [ NOT ] [ form ] NORMALIZED</code>\n<code>IS NOT DISTINCT FROM</code> operator\n<code>IS NOT FALSE</code> operator\n<code>IS NOT NULL</code> operator\n<code>IS NOT TRUE</code> operator\n<code>IS NOT UNKNOWN</code> operator\n<code>IS NULL</code> operator\n<code>IS TRUE</code> operator\n<code>IS UNKNOWN</code> operator\nJSON type\nBinary JSON type\nAccess data nested in a value containing semi-structured …\nAny option that consists of a key value pair where the …\nA lambda function.\n<code>[NOT] LIKE &lt;pattern&gt; [ESCAPE &lt;escape_character&gt;]</code>\nA normal function argument list, including any clauses …\nThe <code>-&gt;&gt;</code> operator.\nMySQL blob with up to 2**32 bytes\nMySQL text with up to 2**32 bytes\nLowCardinality - changes the internal representation of …\nLess than, e.g. <code>a &lt; b</code>\n<code>&lt;^</code> Is below? (PostgreSQL/Redshift geometric operator) See …\n<code>&lt;-&gt;</code> Distance between (PostgreSQL/Redshift geometric …\nLess equal, e.g. <code>a &lt;= b</code>\n<code>&lt;&lt;|</code> Is strictly below? (PostgreSQL/Redshift geometric …\nMap\n<code>DuckDB</code> specific <code>Map</code> literal expression 1\n<code>MySQL</code> specific text search function (1).\n<code>MATERIALIZE &lt;expr&gt;</code> Syntax: <code>b INT MATERIALIZE (a + 1)</code>\nMySQL blob with up to 2**24 bytes\nMySQL medium integer (1) with optional display width e.g. …\nUnsigned medium integer (1) with optional display width …\nMySQL text with up to 2**24 bytes\nMinus, e.g. <code>-9</code>\nMinus, e.g. <code>a - b</code>\nModulo, e.g. <code>a % b</code>\nMultiply, e.g. <code>a * b</code>\nMySQL <code>DIV</code> integer division\n<code>BigQuery</code> specific: An named expression in a typeless …\n<code>name</code> is identifier\nN’string value’\nNested\nNested expression e.g. <code>(foo &gt; bar)</code> or <code>(1)</code>\nNo information about time zone. E.g., TIMESTAMP\nUsed for special functions like <code>CURRENT_TIMESTAMP</code> that are …\nNot, e.g. <code>NOT(true)</code>\nNot equal, e.g. <code>a &lt;&gt; b</code>\n<code>NOT NULL</code>\n<code>NULL</code>\n<code>NULL</code> value\nNullable - special marker NULL represents in ClickHouse as …\nNumeric literal\nNumeric type with optional precision and scale e.g. …\nVariable-length character type e.g. NVARCHAR(10)\nA name of a table, view, custom type, etc., possibly …\nSQLite specific: ON CONFLICT option on column definition …\nBigQuery specific: Explicit column options in a view 1 or …\nOr, e.g. <code>a OR b</code>\nSome dialects support an older syntax for outer joins …\nThe <code>OVERLAPS</code> operator\nAbsolute value, e.g. <code>@ -9</code> (PostgreSQL-specific)\nBitwise Not, e.g. <code>~9</code> (PostgreSQL-specific)\nBitwise shift left, e.g. <code>a &lt;&lt; b</code> (PostgreSQL-specific)\nBitwise shift right, e.g. <code>a &gt;&gt; b</code> (PostgreSQL-specific)\nBitwise XOR, e.g. <code>a # b</code> (PostgreSQL-specific)\nCube root, e.g. <code>||/27</code> (PostgreSQL-specific)\nPostgreSQL-specific custom operator.\nExponent, e.g. <code>a ^ b</code> (PostgreSQL-specific)\nString matches pattern (case insensitively), e.g. <code>a ~~* b</code> …\nString matches pattern (case sensitively), e.g. <code>a ~~ b</code> …\nString does not match pattern (case insensitively), e.g. …\nString does not match pattern (case sensitively), e.g. …\nOverlap operator, e.g. <code>a &amp;&amp; b</code> (PostgreSQL-specific)\nFactorial, e.g. <code>9!</code> (PostgreSQL-specific)\nFactorial, e.g. <code>!!9</code> (PostgreSQL-specific)\nString matches regular expression (case insensitively), …\nString matches regular expression (case sensitively), e.g. …\nString does not match regular expression (case …\nString does not match regular expression (case …\nSquare root, e.g. <code>|/9</code> (PostgreSQL-specific)\nString “starts with”, eg: <code>a ^@ b</code> (PostgreSQL-specific)\nOne or more table partitions and represents which …\n<code>|&amp;&gt;</code> Does not extend below? (PostgreSQL/Redshift geometric …\n<code>|&gt;&gt;</code> Is strictly above? (PostgreSQL/Redshift geometric …\n<code>?</code> or <code>$</code> Prepared statement arg placeholder\nPlus, e.g. <code>+9</code>\nPlus, e.g. <code>a + b</code>\nSnowflake specific: an option of specifying security …\nMySQL definition for <code>PRIMARY KEY</code> constraints statements:\\\nA reference to the prior level in a CONNECT BY clause.\nQualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>. (Same …\nQualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>.\nThe <code>?</code> operator.\nThe <code>?&amp;</code> operator.\n<code>?-</code> Is horizontal? (PostgreSQL/Redshift geometric operator) …\n<code>?-</code> Is horizontal? (PostgreSQL/Redshift geometric operator) …\n<code>?-|</code> Is perpendicular? (PostgreSQL/Redshift geometric …\n<code>?||</code> Are Parallel? (PostgreSQL/Redshift geometric operator) …\n<code>?#</code> Intersects? (PostgreSQL/Redshift geometric operator) …\n<code>?|</code> Is vertical? (PostgreSQL/Redshift geometric operator) …\nThe <code>?|</code> operator.\nMySQL: RLIKE regex or REGEXP regex\nFloating point e.g. REAL\nRegclass used in postgresql serial\nThe <code>ROLLUP</code> expr.\nSet\nSigned integer as used in MySQL CAST target types, without …\nSigned integer as used in MySQL CAST target types, with …\nSIMILAR TO regex\nB’string value’\nSingle quoted literal with raw string prefix. Example …\n‘string value’\nSmall integer with optional display width e.g. SMALLINT or …\nUnsigned small integer with optional display width e.g. …\nSpaceship, e.g. <code>a &lt;=&gt; b</code>\nPrimitive SQL values such as number and string\nString with optional length.\nString/Array Concat operator, e.g. <code>a || b</code>\nStruct\n<code>Struct</code> literal expression Syntax:\nA parenthesized subquery <code>(SELECT ...)</code>, used in expression …\nOn some dialects, a subquery can be passed without …\nTable type in postgresql. e.g. CREATE FUNCTION RETURNS …\nA table-level constraint, specified in a <code>CREATE TABLE</code> or an\nSnowflake specific: Specifies the tag name and the tag …\nText\n<code>~=</code> Same as? (PostgreSQL/Redshift geometric operator) See …\nTime with optional time precision and time zone …\nTimestamp with optional time precision and time zone …\nTimestamp and Time data types information about TimeZone …\nMySQL blob with up to 2**8 bytes\nTiny integer with optional display width e.g. TINYINT or …\nUnsigned tiny integer with optional display width e.g. …\nMySQL text with up to 2**8 bytes\nTrigger data type, returned by functions associated with …\nTriple double quoted literal with byte string prefix. …\nTriple double quoted literal with raw string prefix. …\nTriple double quoted strings: Example “”“abc”“”\nTriple single quoted literal with byte string prefix. …\nTriple single quoted literal with raw string prefix. …\nTriple single quoted strings: Example ‘’‘abc’‘’\nTuple\nROW / TUPLE a single value, such as <code>SELECT (1, 2)</code>\nA constant of form <code>&lt;data_type&gt; &#39;value&#39;</code>. This can represent …\nPostgresql specific <code>WITH TIME ZONE</code> formatting, for both …\nUnsigned integer type in clickhouse Note: UInt128 mean 128 …\nUnsigned integer type in clickhouse Note: UInt16 mean 16 …\nUnsigned integer type in clickhouse Note: UInt256 mean 256 …\nUnsigned integer type in clickhouse Note: UInt32 mean 32 …\nUnsigned integer type in clickhouse Note: UInt64 mean 64 …\nUnsigned integer type in clickhouse Note: UInt8 mean 8 …\nUnary operation e.g. <code>NOT foo</code>\nUnary operators\nu&amp;‘string value’ (postgres extension) See Postgres docs\nUnion\nMySQL definition for <code>UNIQUE</code> constraints statements:\\\n<code>{ PRIMARY KEY | UNIQUE } [&lt;constraint_characteristics&gt;]</code>\nSigned integer as used in MySQL CAST target types, without …\nUnsigned integer as used in MySQL CAST target types, with …\nNo type specified - only used with <code>SQLiteDialect</code>, from …\nUuid type\nA literal value, such as string, number, date or NULL\n<code>VARBIT(n)</code>: Variable-length bit string. Postgres alias for …\nVariable-length binary with optional length type e.g. …\nVariable-length character type e.g. VARCHAR(10)\nA type that can be visited by a <code>Visitor</code>. See <code>Visitor</code> for …\nA type that can be visited by a <code>VisitorMut</code>. See <code>VisitorMut</code> …\nA visitor that can be used to walk an AST tree.\nA visitor that can be used to mutate an AST tree.\nAn unqualified <code>*</code>\nTemporal type ‘WITH TIME ZONE’. E.g., TIMESTAMP WITH …\nTemporal type ‘WITHOUT TIME ZONE’. E.g., TIME WITHOUT …\nXOR, e.g. <code>a XOR b</code>\nThe arguments to the function, including any options …\nCasts string to value of specified numeric data type. If …\nDeserialize default constraint from json bytes\ne.g. <code>x &gt; 5</code> in <code>COUNT(x) FILTER (WHERE x &gt; 5)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the underlying literal is a string, regardless of quote …\nCreate a new identifier with the given value and no quotes …\nIndicates how <code>NULL</code>s should be handled in the calculation.\nThe <code>OVER</code> clause, indicating a window function call.\nThe parameters to the function, including any options …\nInvoked for any expressions that appear in the AST\nInvoked for any expressions that appear in the AST\nInvoked for any expressions that appear in the AST\nInvoked for any expressions that appear in the AST\nInvoked for any queries that appear in the AST after …\nInvoked for any queries that appear in the AST after …\nInvoked for any queries that appear in the AST after …\nInvoked for any queries that appear in the AST after …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any statements that appear in the AST after …\nInvoked for any statements that appear in the AST after …\nInvoked for any statements that appear in the AST after …\nInvoked for any statements that appear in the AST after …\nInvoked for any table factors that appear in the AST after …\nInvoked for any table factors that appear in the AST after …\nInvoked for any table factors that appear in the AST after …\nInvoked for any table factors that appear in the AST after …\nInvoked for any Value that appear in the AST after …\nInvoked for any Value that appear in the AST after …\nInvoked for any statements that appear in the AST after …\nInvoked for any statements that appear in the AST after …\nInvoked for any expressions that appear in the AST before …\nInvoked for any expressions that appear in the AST before …\nInvoked for any expressions that appear in the AST before …\nInvoked for any expressions that appear in the AST before …\nInvoked for any queries that appear in the AST before …\nInvoked for any queries that appear in the AST before …\nInvoked for any queries that appear in the AST before …\nInvoked for any queries that appear in the AST before …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any statements that appear in the AST before …\nInvoked for any statements that appear in the AST before …\nInvoked for any statements that appear in the AST before …\nInvoked for any statements that appear in the AST before …\nInvoked for any table factors that appear in the AST …\nInvoked for any table factors that appear in the AST …\nInvoked for any table factors that appear in the AST …\nInvoked for any table factors that appear in the AST …\nInvoked for any Value that appear in the AST before …\nInvoked for any Value that appear in the AST before …\nInvoked for any value that appear in the AST before …\nInvoked for any value that appear in the AST before …\nThe starting quote if any. Valid quote characters are the …\nThe span of the identifier in the original SQL string.\nConvert a sql value into datatype’s value\nConverts SQL value to value according to the data type. If …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nFlags whether this function call uses the ODBC syntax.\nCreates a new <code>Expr::Value</code>\nThe value of the identifier without quotes.\ncheck this value is a valid duration string\nInvokes the provided closure iteratively with a mutable …\nInvokes the provided closure on all statements (e.g. <code>SELECT</code>…\nCreate a new quoted identifier with the given quote and …\nA clause used with certain aggregate functions to control …\nfalse if ‘GENERATED ALWAYS’ is skipped (option starts …\nThe target character encoding\n<code>(&lt;col&gt;, &lt;col&gt;, ...)</code>.\nThe target data type\nThe expression to convert\nStruct field definitions.\nOptional CAST(string_expression AS type FORMAT …\nCONVERT (false) or TRY_CONVERT (true) …\n<code>&lt;expr&gt;</code>.\n<code>&lt;search modifier&gt;</code>\nThe path to the data to extract.\nfalse if the expression is represented using the …\nHow to translate the expression.\nwhether the target comes before the expr (MSSQL syntax)\nThe value being queried.\nThe value of the constant. Hint: you can unwrap the string …\nThe value of the constant. Hint: you can unwrap the string …\nStruct values.\nIdentifiers of the columns that are unique.\nIdentifiers of the columns that form the primary key.\nReferred column identifier list.\nReferred column identifier list.\nWhether this index starts with KEY (true) or INDEX …\nWhether this is a <code>FULLTEXT</code> (true) or <code>SPATIAL</code> (false) …\nIndex name\nIndex name\nOptional <code>USING</code> of index type statement before columns.\nOptional <code>USING</code> of index type statement before columns.\nOptional index type.\nWhether the type is followed by the keyword <code>KEY</code>, <code>INDEX</code>, or …\nWhether the type is followed by the keyword <code>KEY</code>, <code>INDEX</code>, or …\nConstraint name.\nConstraint name.\nIndex name.\nOptional Postgres nulls handling: …\nOptional index name.\n<code>ALIAS &lt;expr&gt;</code>\n<code>ALL</code> operation e.g. <code>foo &gt; ALL(bar)</code>, comparison operator is …\nAnd, e.g. <code>a AND b</code>\n<code>&amp;&gt;</code> Overlaps to right? (PostgreSQL/Redshift geometric …\n<code>&amp;&lt;</code> Overlaps to left? (PostgreSQL/Redshift geometric …\n<code>&amp;&lt;|</code> Does not extend above? (PostgreSQL/Redshift geometric …\n<code>ANY</code> operation e.g. <code>foo &gt; ANY(bar)</code>, comparison operator is …\nAny data type, used in BigQuery UDF definitions for …\nArrays\nAn array expression e.g. <code>ARRAY[1, 2]</code>\nThe <code>-&gt;</code> operator.\nThe <code>&lt;@</code> operator.\n<code>@</code> Contained or on? (PostgreSQL/Redshift geometric operator)\nThe <code>@&gt;</code> operator.\nThe <code>@@</code> operator.\n<code>@-@</code> Length or circumference (PostgreSQL/Redshift geometric …\nThe <code>@?</code> operator.\nAT a timestamp to a different timezone e.g. …\nUnary logical not operator: e.g. <code>! false</code> (Hive-specific)\n<code>&lt;expr&gt; [ NOT ] BETWEEN &lt;low&gt; AND &lt;high&gt;</code>\nThis is alias for <code>BigNumeric</code> type used in BigQuery\nBig integer with optional display width e.g. BIGINT or …\nUnsigned big integer with optional display width e.g. …\nBigNumeric type used in BigQuery\nFixed-length binary type with optional length e.g.  …\nBinary operation e.g. <code>1 + 1</code> or <code>foo &gt; bar</code>\nBinary operators\nBit string, e.g. Postgres, MySQL, or MSSQL\n<code>BIT VARYING(n)</code>: Variable-length bit string e.g. Postgres\nBitwise and, e.g. <code>a &amp; b</code>\nBitwise or, e.g. <code>a | b</code>\nBitwise XOR, e.g. <code>a ^ b</code>\nLarge binary object with optional length e.g. BLOB, …\nBool as alias for Boolean in postgresql\nBoolean\nBoolean value true or false\nType returned when the recursion returns early.\nType returned when the recursion returns early.\nBytea\nVariable-length binary data with optional length.\n…\n<code>CAST</code> an expression to a different data type e.g. …\nFixed-length char type e.g. CHAR(10)\nLarge character object with optional length e.g. CHAR …\nChar varying type e.g. CHAR VARYING(10)\nFixed-length character type e.g. CHARACTER(10)\nLarge character object with optional length e.g. CHARACTER …\nCharacter varying type e.g. CHARACTER VARYING(10)\n<code>[ CONSTRAINT &lt;name&gt; ] CHECK (&lt;expr&gt;)</code>\n<code>CHECK (&lt;expr&gt;)</code>\nLarge character object with optional length e.g. CLOB, …\nClustered represents the clustered version of table …\n<code>expr COLLATE collation</code>\nSQL column definition\n<code>ColumnOption</code>s are modifiers that follow a column …\nAn optionally-named <code>ColumnOption</code>: …\nMulti-part expression access.\nMulti-part identifier, e.g. <code>table_alias.column</code> or …\nCONVERT a value to a different data type or character …\nThe <code>CUBE</code> expr.\nCustom type such as enums\nSupport for custom operators (such as Postgres custom …\nSQL data types\nDate\nDate32 with the same range as Datetime64\nDatetime with optional time precision e.g. MySQL.\nDatetime with time precision and optional timezone e.g. …\nDec type with optional precision and scale e.g. DEC(10,2), …\nDecimal type with optional precision and scale e.g. …\n<code>DEFAULT &lt;restricted-expr&gt;</code>\nDialect-specific options, such as:\n<code>DuckDB</code> specific <code>Struct</code> literal expression 1\nDivide, e.g. <code>a / b</code>\nDouble\n<code>@@</code> Center (PostgreSQL/Redshift geometric operator) see …\n<code>##</code> Point of closest proximity (PostgreSQL/Redshift …\nDouble PRECISION e.g. standard, postgresql\nB“string value“\nDouble quoted literal with raw string prefix. Example …\nInteger division operator <code>//</code> in DuckDB\nEnums\n<code>EPHEMERAL [&lt;expr&gt;]</code>\nEqual, e.g. <code>a = b</code>\ne’string value’ (postgres extension) See Postgres docs …\nAn exists expression <code>[ NOT ] EXISTS(SELECT ...)</code>, used in …\nAn SQL expression of any type.\n<code>name</code> is arbitrary expression\nExtract a field from a timestamp e.g. …\nA fixed-length string e.g ClickHouse.\nFloating point with optional precision e.g. FLOAT(8)\nFloating point in clickhouse\nFloat4 as alias for Real in postgresql\nFloating point in bigquery\nFloat8 as alias for Double in postgresql\nA referential integrity constraint (…\nA referential integrity constraint (…\nMySQLs fulltext definition. Since the <code>SPATIAL</code> definition …\nA function call\nScalar function call e.g. <code>LEFT(foo, 5)</code>\nThe arguments passed to a function call.\n<code>Generated</code>s are modifiers that follow a column definition …\ngeometric type\nThe <code>GROUPING SETS</code> expr.\nGreater than, e.g. <code>a &gt; b</code>\n<code>&gt;^</code> Is above? (PostgreSQL/Redshift geometric operator) See …\nGreater equal, e.g. <code>a &gt;= b</code>\n<code>#</code> Number of points in path or polygon (PostgreSQL/Redshift …\nThe <code>#&gt;</code> operator.\nThe <code>#&gt;&gt;</code> operator.\nThe <code>#-</code> operator.\nX’hex value’\n<code>ILIKE</code> (case-insensitive <code>LIKE</code>)\nAn identifier, decomposed into its value or character data …\nSingle identifier options, e.g. <code>HEAP</code> for MSSQL.\nIdentifier e.g. table name or column name\nCreates an identity or an autoincrement column in a table. …\n<code>[ NOT ] IN (val1, val2, ...)</code>\n<code>[ NOT ] IN (SELECT ...)</code>\n<code>[ NOT ] IN UNNEST(array_expression)</code>\nMySQLs index definition for index creation. Not present on …\nInt with optional display width e.g. INT or INT(11)\nInteger type in clickhouse Note: Int128 mean 128 bits in …\nInteger type in clickhouse Note: Int16 mean 16 bits in …\nInt2 as alias for SmallInt in postgresql Note: Int2 mean 2 …\nInteger type in clickhouse Note: Int256 mean 256 bits in …\nUnsigned Int2 with optional display width e.g. INT2 …\nInteger type in clickhouse Note: Int16 mean 32 bits in …\nInt4 as alias for Integer in postgresql Note: Int4 mean 4 …\nUnsigned int4 with optional display width e.g. INT4 …\nInteger type in bigquery, clickhouse\nInt8 as alias for Bigint in postgresql and integer type in …\nUnsigned Int8 with optional display width e.g. INT8 …\nUnsigned int with optional display width e.g. INT UNSIGNED …\nInteger with optional display width e.g. INTEGER or …\nUnsigned integer with optional display width e.g. INTEGER …\nInterval\nAn interval expression e.g. <code>INTERVAL &#39;1&#39; YEAR</code>\n…\n<code>IS DISTINCT FROM</code> operator\n<code>IS FALSE</code> operator\n<code>&lt;expr&gt; IS [ NOT ] [ form ] NORMALIZED</code>\n<code>IS NOT DISTINCT FROM</code> operator\n<code>IS NOT FALSE</code> operator\n<code>IS NOT NULL</code> operator\n<code>IS NOT TRUE</code> operator\n<code>IS NOT UNKNOWN</code> operator\n<code>IS NULL</code> operator\n<code>IS TRUE</code> operator\n<code>IS UNKNOWN</code> operator\nJSON type\nBinary JSON type\nAccess data nested in a value containing semi-structured …\nAny option that consists of a key value pair where the …\nA lambda function.\n<code>[NOT] LIKE &lt;pattern&gt; [ESCAPE &lt;escape_character&gt;]</code>\nA normal function argument list, including any clauses …\nThe <code>-&gt;&gt;</code> operator.\nMySQL blob with up to 2**32 bytes\nMySQL text with up to 2**32 bytes\nLowCardinality - changes the internal representation of …\nLess than, e.g. <code>a &lt; b</code>\n<code>&lt;^</code> Is below? (PostgreSQL/Redshift geometric operator) See …\n<code>&lt;-&gt;</code> Distance between (PostgreSQL/Redshift geometric …\nLess equal, e.g. <code>a &lt;= b</code>\n<code>&lt;&lt;|</code> Is strictly below? (PostgreSQL/Redshift geometric …\nMap\n<code>DuckDB</code> specific <code>Map</code> literal expression 1\n<code>MySQL</code> specific text search function (1).\n<code>MATERIALIZE &lt;expr&gt;</code> Syntax: <code>b INT MATERIALIZE (a + 1)</code>\nMySQL blob with up to 2**24 bytes\nMySQL medium integer (1) with optional display width e.g. …\nUnsigned medium integer (1) with optional display width …\nMySQL text with up to 2**24 bytes\nMinus, e.g. <code>-9</code>\nMinus, e.g. <code>a - b</code>\nModulo, e.g. <code>a % b</code>\nMultiply, e.g. <code>a * b</code>\nMySQL <code>DIV</code> integer division\n<code>BigQuery</code> specific: An named expression in a typeless …\n<code>name</code> is identifier\nN’string value’\nNested\nNested expression e.g. <code>(foo &gt; bar)</code> or <code>(1)</code>\nNo information about time zone. E.g., TIMESTAMP\nUsed for special functions like <code>CURRENT_TIMESTAMP</code> that are …\nNot, e.g. <code>NOT(true)</code>\nNot equal, e.g. <code>a &lt;&gt; b</code>\n<code>NOT NULL</code>\n<code>NULL</code>\n<code>NULL</code> value\nNullable - special marker NULL represents in ClickHouse as …\nNumeric literal\nNumeric type with optional precision and scale e.g. …\nVariable-length character type e.g. NVARCHAR(10)\nA name of a table, view, custom type, etc., possibly …\nSQLite specific: ON CONFLICT option on column definition …\nBigQuery specific: Explicit column options in a view 1 or …\nOr, e.g. <code>a OR b</code>\nSome dialects support an older syntax for outer joins …\nThe <code>OVERLAPS</code> operator\nAbsolute value, e.g. <code>@ -9</code> (PostgreSQL-specific)\nBitwise Not, e.g. <code>~9</code> (PostgreSQL-specific)\nBitwise shift left, e.g. <code>a &lt;&lt; b</code> (PostgreSQL-specific)\nBitwise shift right, e.g. <code>a &gt;&gt; b</code> (PostgreSQL-specific)\nBitwise XOR, e.g. <code>a # b</code> (PostgreSQL-specific)\nCube root, e.g. <code>||/27</code> (PostgreSQL-specific)\nPostgreSQL-specific custom operator.\nExponent, e.g. <code>a ^ b</code> (PostgreSQL-specific)\nString matches pattern (case insensitively), e.g. <code>a ~~* b</code> …\nString matches pattern (case sensitively), e.g. <code>a ~~ b</code> …\nString does not match pattern (case insensitively), e.g. …\nString does not match pattern (case sensitively), e.g. …\nOverlap operator, e.g. <code>a &amp;&amp; b</code> (PostgreSQL-specific)\nFactorial, e.g. <code>9!</code> (PostgreSQL-specific)\nFactorial, e.g. <code>!!9</code> (PostgreSQL-specific)\nString matches regular expression (case insensitively), …\nString matches regular expression (case sensitively), e.g. …\nString does not match regular expression (case …\nString does not match regular expression (case …\nSquare root, e.g. <code>|/9</code> (PostgreSQL-specific)\nString “starts with”, eg: <code>a ^@ b</code> (PostgreSQL-specific)\nOne or more table partitions and represents which …\n<code>|&amp;&gt;</code> Does not extend below? (PostgreSQL/Redshift geometric …\n<code>|&gt;&gt;</code> Is strictly above? (PostgreSQL/Redshift geometric …\n<code>?</code> or <code>$</code> Prepared statement arg placeholder\nPlus, e.g. <code>+9</code>\nPlus, e.g. <code>a + b</code>\nSnowflake specific: an option of specifying security …\nMySQL definition for <code>PRIMARY KEY</code> constraints statements:\\\nA reference to the prior level in a CONNECT BY clause.\nQualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>. (Same …\nQualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>.\nThe <code>?</code> operator.\nThe <code>?&amp;</code> operator.\n<code>?-</code> Is horizontal? (PostgreSQL/Redshift geometric operator) …\n<code>?-</code> Is horizontal? (PostgreSQL/Redshift geometric operator) …\n<code>?-|</code> Is perpendicular? (PostgreSQL/Redshift geometric …\n<code>?||</code> Are Parallel? (PostgreSQL/Redshift geometric operator) …\n<code>?#</code> Intersects? (PostgreSQL/Redshift geometric operator) …\n<code>?|</code> Is vertical? (PostgreSQL/Redshift geometric operator) …\nThe <code>?|</code> operator.\nMySQL: RLIKE regex or REGEXP regex\nFloating point e.g. REAL\nRegclass used in postgresql serial\nThe <code>ROLLUP</code> expr.\nSet\nSigned integer as used in MySQL CAST target types, without …\nSigned integer as used in MySQL CAST target types, with …\nSIMILAR TO regex\nB’string value’\nSingle quoted literal with raw string prefix. Example …\n‘string value’\nSmall integer with optional display width e.g. SMALLINT or …\nUnsigned small integer with optional display width e.g. …\nSpaceship, e.g. <code>a &lt;=&gt; b</code>\nPrimitive SQL values such as number and string\nString with optional length.\nString/Array Concat operator, e.g. <code>a || b</code>\nStruct\n<code>Struct</code> literal expression Syntax:\nA parenthesized subquery <code>(SELECT ...)</code>, used in expression …\nOn some dialects, a subquery can be passed without …\nTable type in postgresql. e.g. CREATE FUNCTION RETURNS …\nA table-level constraint, specified in a <code>CREATE TABLE</code> or an\nSnowflake specific: Specifies the tag name and the tag …\nText\n<code>~=</code> Same as? (PostgreSQL/Redshift geometric operator) See …\nTime with optional time precision and time zone …\nTimestamp with optional time precision and time zone …\nTimestamp and Time data types information about TimeZone …\nMySQL blob with up to 2**8 bytes\nTiny integer with optional display width e.g. TINYINT or …\nUnsigned tiny integer with optional display width e.g. …\nMySQL text with up to 2**8 bytes\nTrigger data type, returned by functions associated with …\nTriple double quoted literal with byte string prefix. …\nTriple double quoted literal with raw string prefix. …\nTriple double quoted strings: Example “”“abc”“”\nTriple single quoted literal with byte string prefix. …\nTriple single quoted literal with raw string prefix. …\nTriple single quoted strings: Example ‘’‘abc’‘’\nTuple\nROW / TUPLE a single value, such as <code>SELECT (1, 2)</code>\nA constant of form <code>&lt;data_type&gt; &#39;value&#39;</code>. This can represent …\nPostgresql specific <code>WITH TIME ZONE</code> formatting, for both …\nUnsigned integer type in clickhouse Note: UInt128 mean 128 …\nUnsigned integer type in clickhouse Note: UInt16 mean 16 …\nUnsigned integer type in clickhouse Note: UInt256 mean 256 …\nUnsigned integer type in clickhouse Note: UInt32 mean 32 …\nUnsigned integer type in clickhouse Note: UInt64 mean 64 …\nUnsigned integer type in clickhouse Note: UInt8 mean 8 …\nUnary operation e.g. <code>NOT foo</code>\nUnary operators\nu&amp;‘string value’ (postgres extension) See Postgres docs\nUnion\nMySQL definition for <code>UNIQUE</code> constraints statements:\\\n<code>{ PRIMARY KEY | UNIQUE } [&lt;constraint_characteristics&gt;]</code>\nSigned integer as used in MySQL CAST target types, without …\nUnsigned integer as used in MySQL CAST target types, with …\nNo type specified - only used with <code>SQLiteDialect</code>, from …\nUuid type\nA literal value, such as string, number, date or NULL\n<code>VARBIT(n)</code>: Variable-length bit string. Postgres alias for …\nVariable-length binary with optional length type e.g. …\nVariable-length character type e.g. VARCHAR(10)\nA type that can be visited by a <code>Visitor</code>. See <code>Visitor</code> for …\nA type that can be visited by a <code>VisitorMut</code>. See <code>VisitorMut</code> …\nA visitor that can be used to walk an AST tree.\nA visitor that can be used to mutate an AST tree.\nAn unqualified <code>*</code>\nTemporal type ‘WITH TIME ZONE’. E.g., TIMESTAMP WITH …\nTemporal type ‘WITHOUT TIME ZONE’. E.g., TIME WITHOUT …\nXOR, e.g. <code>a XOR b</code>\nThe arguments to the function, including any options …\ne.g. <code>x &gt; 5</code> in <code>COUNT(x) FILTER (WHERE x &gt; 5)</code>\nIndicates how <code>NULL</code>s should be handled in the calculation.\nThe <code>OVER</code> clause, indicating a window function call.\nThe parameters to the function, including any options …\nThe starting quote if any. Valid quote characters are the …\nThe span of the identifier in the original SQL string.\nFlags whether this function call uses the ODBC syntax.\nThe value of the identifier without quotes.\nInvokes the provided closure iteratively with a mutable …\nInvokes the provided closure on all statements (e.g. <code>SELECT</code>…\nA clause used with certain aggregate functions to control …\nfalse if ‘GENERATED ALWAYS’ is skipped (option starts …\nThe target character encoding\n<code>(&lt;col&gt;, &lt;col&gt;, ...)</code>.\nThe target data type\nThe expression to convert\nStruct field definitions.\nOptional CAST(string_expression AS type FORMAT …\nCONVERT (false) or TRY_CONVERT (true) …\n<code>&lt;expr&gt;</code>.\n<code>&lt;search modifier&gt;</code>\nThe path to the data to extract.\nfalse if the expression is represented using the …\nHow to translate the expression.\nwhether the target comes before the expr (MSSQL syntax)\nThe value being queried.\nThe value of the constant. Hint: you can unwrap the string …\nThe value of the constant. Hint: you can unwrap the string …\nStruct values.\nIdentifiers of the columns that are unique.\nIdentifiers of the columns that form the primary key.\nReferred column identifier list.\nReferred column identifier list.\nWhether this index starts with KEY (true) or INDEX …\nWhether this is a <code>FULLTEXT</code> (true) or <code>SPATIAL</code> (false) …\nIndex name\nIndex name\nOptional <code>USING</code> of index type statement before columns.\nOptional <code>USING</code> of index type statement before columns.\nOptional index type.\nWhether the type is followed by the keyword <code>KEY</code>, <code>INDEX</code>, or …\nWhether the type is followed by the keyword <code>KEY</code>, <code>INDEX</code>, or …\nConstraint name.\nConstraint name.\nIndex name.\nOptional Postgres nulls handling: …\nOptional index name.\n<code>ALL</code> operation e.g. <code>foo &gt; ALL(bar)</code>, comparison operator is …\n<code>ANY</code> operation e.g. <code>foo &gt; ANY(bar)</code>, comparison operator is …\nAn array expression e.g. <code>ARRAY[1, 2]</code>\nAT a timestamp to a different timezone e.g. …\n<code>&lt;expr&gt; [ NOT ] BETWEEN &lt;low&gt; AND &lt;high&gt;</code>\nBinary operation e.g. <code>1 + 1</code> or <code>foo &gt; bar</code>\nBoolean value true or false\n…\n<code>CAST</code> an expression to a different data type e.g. …\n<code>expr COLLATE collation</code>\nSNAFU context selector for the <code>Error::ColumnTypeMismatch</code> …\nMulti-part expression access.\nMulti-part identifier, e.g. <code>table_alias.column</code> or …\nCONVERT a value to a different data type or character …\nSNAFU context selector for the <code>Error::ConvertSqlValue</code> …\nSNAFU context selector for the <code>Error::ConvertStr</code> variant\nThe <code>CUBE</code> expr.\nSNAFU context selector for the <code>Error::Datatype</code> variant\nSNAFU context selector for the <code>Error::Deserialize</code> variant\n<code>DuckDB</code> specific <code>Struct</code> literal expression 1\nB“string value“\nDouble quoted literal with raw string prefix. Example …\nContains the error value\nSQL parser errors.\ne’string value’ (postgres extension) See Postgres docs …\nAn exists expression <code>[ NOT ] EXISTS(SELECT ...)</code>, used in …\nAn SQL expression of any type.\nExtract a field from a timestamp e.g. …\nScalar function call e.g. <code>LEFT(foo, 5)</code>\nThe <code>GROUPING SETS</code> expr.\nX’hex value’\n<code>ILIKE</code> (case-insensitive <code>LIKE</code>)\nIdentifier e.g. table name or column name\n<code>[ NOT ] IN (val1, val2, ...)</code>\n<code>[ NOT ] IN (SELECT ...)</code>\n<code>[ NOT ] IN UNNEST(array_expression)</code>\nAn interval expression e.g. <code>INTERVAL &#39;1&#39; YEAR</code>\n…\nSNAFU context selector for the <code>Error::InvalidCast</code> variant\nSNAFU context selector for the <code>Error::InvalidSqlValue</code> …\nSNAFU context selector for the <code>Error::InvalidUnaryOp</code> …\n<code>IS DISTINCT FROM</code> operator\n<code>IS FALSE</code> operator\n<code>&lt;expr&gt; IS [ NOT ] [ form ] NORMALIZED</code>\n<code>IS NOT DISTINCT FROM</code> operator\n<code>IS NOT FALSE</code> operator\n<code>IS NOT NULL</code> operator\n<code>IS NOT TRUE</code> operator\n<code>IS NOT UNKNOWN</code> operator\n<code>IS NULL</code> operator\n<code>IS TRUE</code> operator\n<code>IS UNKNOWN</code> operator\nAccess data nested in a value containing semi-structured …\nA lambda function.\n<code>[NOT] LIKE &lt;pattern&gt; [ESCAPE &lt;escape_character&gt;]</code>\n<code>DuckDB</code> specific <code>Map</code> literal expression 1\n<code>MySQL</code> specific text search function (1).\n<code>BigQuery</code> specific: An named expression in a typeless …\nN’string value’\nNested expression e.g. <code>(foo &gt; bar)</code> or <code>(1)</code>\n<code>NULL</code> value\nNumeric literal\nContains the success value\nSome dialects support an older syntax for outer joins …\nSNAFU context selector for the <code>Error::ParseSqlValue</code> variant\n<code>?</code> or <code>$</code> Prepared statement arg placeholder\nA reference to the prior level in a CONNECT BY clause.\nQualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>. (Same …\nMySQL: RLIKE regex or REGEXP regex\nThe <code>ROLLUP</code> expr.\nSIMILAR TO regex\nB’string value’\nSingle quoted literal with raw string prefix. Example …\n‘string value’\nPrimitive SQL values such as number and string\n<code>Struct</code> literal expression Syntax:\nA parenthesized subquery <code>(SELECT ...)</code>, used in expression …\nSNAFU context selector for the <code>Error::TimestampOverflow</code> …\nTriple double quoted literal with byte string prefix. …\nTriple double quoted literal with raw string prefix. …\nTriple double quoted strings: Example “”“abc”“”\nTriple single quoted literal with byte string prefix. …\nTriple single quoted literal with raw string prefix. …\nTriple single quoted strings: Example ‘’‘abc’‘’\nROW / TUPLE a single value, such as <code>SELECT (1, 2)</code>\nA constant of form <code>&lt;data_type&gt; &#39;value&#39;</code>. This can represent …\nUnary operation e.g. <code>NOT foo</code>\nu&amp;‘string value’ (postgres extension) See Postgres docs\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::UnsupportedUnaryOp</code> …\nA literal value, such as string, number, date or NULL\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe target character encoding\n<code>(&lt;col&gt;, &lt;col&gt;, ...)</code>.\nThe target data type\nThe expression to convert\nStruct field definitions.\nOptional CAST(string_expression AS type FORMAT …\nCONVERT (false) or TRY_CONVERT (true) …\n<code>&lt;expr&gt;</code>.\n<code>&lt;search modifier&gt;</code>\nThe path to the data to extract.\nfalse if the expression is represented using the …\nHow to translate the expression.\nwhether the target comes before the expr (MSSQL syntax)\nThe value being queried.\nThe value of the constant. Hint: you can unwrap the string …\nThe value of the constant. Hint: you can unwrap the string …\nStruct values.")